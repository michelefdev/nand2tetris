// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */


CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    
    // First write the is_keyboard bit
    And(a=address[13] , b=address[14] , out=oneone );
    And(a=oneone , b=trailzeros , out=iskeyboard );

    // then write the trailzeros bit
    Or8Way(in=address[0..7] , out=orout1 );
    Or8Way(in[0..4]=address[8..12], in[6..7]=false , out=orout2 );
    Or(a=orout1 , b=orout2 , out=orout3 );
    Not(in=orout3 , out=trailzeros );

    // then write the isoverflow bit
    Not(in=trailzeros , out=nottrailzeros );
    And(a=nottrailzeros , b=oneone , out=isoverflow );

    // Core memory architecture
    DMux(in=load , sel=address[14] , a=load1 , b=load2 );
    
    RAM16K(in=in , load=load1 , address=address[0..13] , out=ramout );
    DMux(in=load2 , sel=address[13] , a=loads , b=null );

    Screen(in=in , load=loads , address=address[0..12] , out=screenout );

    Mux16(a=ramout , b=screenout , sel=address[14] , out=firstout );
    Keyboard(out=kbdout );
    Mux16(a=firstout , b=kbdout , sel=iskeyboard, out=secondout );
    Mux16(a=secondout , b=false , sel=isoverflow, out=out );
    
}